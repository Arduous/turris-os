#!/bin/bash -xe


if [ "$1" = turris ] || [ "$1" = omnia ]; then
    export TARGET_BOARD="$1"
    shift
else
    echo "The first argument is empty or unknown!"
    echo "You have to specify target board - options are 'turris' or 'omnia'"
    exit 1
fi


clean_build() {
	# Cleaning
	[ -d ./tmp ] && rm -rf ./tmp
	[ -d ./bin ] && rm -rf ./bin
	[ -d ./bin-nor ] && rm -rf ./bin-nor
	[ -d ./logs ] && rm -rf ./logs
	[ -d ./logs-nand ] && rm -rf ./logs-nand
	[ -d ./logs-nor ] && rm -rf ./logs-nor
	[ -d ./logs-initram ] && rm -rf ./logs-initram

	date >>./log_build_script.txt

}

make_defconfig() {
	make defconfig "$@"
	egrep '^(#[[:space:]]+)?CONFIG_KERNEL' configs/common configs/$TARGET_BOARD | sed 's|.*:||' >> ./.config
	if [ -n "${PKG_BRANCH}" ] && [ "${PKG_BRANCH}" \!= master ] && [ "${PKG_BRANCH}" \!= stable ] && [ "${PKG_BRANCH}" \!= stable-omnia ]; then
		echo CONFIG_PACKAGE_cznic-repo-keys-test=y >> .config
		echo CONFIG_PACKAGE_getbranch-test=y >> .config
	else
		echo CONFIG_PACKAGE_cznic-repo-keys-test=m >> .config
		echo CONFIG_PACKAGE_getbranch-deploy=y >> .config
	fi
}



update_feeds() {
	# Clean feeds
	./scripts/feeds clean
	./scripts/feeds update -a
	echo "Debug-1">>./log_build_script.txt
	# Patch feeds
	pushd patches
	for feed in *; do
	pushd $feed
	for patch in *; do
		pushd ../../feeds/$feed
		patch -p1 < ../../patches/$feed/$patch
		popd
	done
	popd
	done
	popd
	./scripts/feeds install -a
	echo "Debug-2">>./log_build_script.txt

	# Uninstall broken pkgs
	./scripts/feeds uninstall \
	$([ \! -f ./disabled_packages.common ] || echo $(cut -d '#' -f1 ./disabled_packages.common)) \
	$([ \! -f ./disabled_packages.$TARGET_BOARD ] || echo $(cut -d '#' -f1 ./disabled_packages.$TARGET_BOARD))

}



make_userlist() {
echo "Debug-3">>./log_build_script.txt
# Override packages release numbers
scripts/override_release_numbers.sh
echo "Debug-4">>./log_build_script.txt

# Build NAND FW
echo "Debug-5">>./log_build_script.txt

# Include important userlists
# Base list generation
cat > base.lua << EOF
-- The basic repository
Repository 'turris' 'https://api.turris.cz/openwrt-repo/${TARGET_BOARD}${REAL_PKG_BRANCH}/packages' {
	subdirs = {'base', $(echo $(sed -n 's|^src-git[[:blank:]]\+\([^[:blank:]]*\)[[:blank:]]\+http.*|\1|p' ./feeds.conf.default) | sed -e 's|\([^[:blank:]]\+\)|'"'\\1'|g" -e 's|\ |,\ |g')}
}
EOF
echo "Debug-6">>./log_build_script.txt

if [ -z "$BUILD_ALL" ]; then
echo "Debug-7">>./log_build_script.txt

cat >> base.lua << EOF

-- The fallback repository
Repository 'turris-fallback' 'https://api.turris.cz/openwrt-repo/${TARGET_BOARD}-nightly/packages' {
	subdirs = {'base', $(echo $(sed -n 's|^src-git[[:blank:]]\+\([^[:blank:]]*\)[[:blank:]]\+http.*|\1|p' ./feeds.conf.default) | sed -e 's|\([^[:blank:]]\+\)|'"'\\1'|g" -e 's|\ |,\ |g')},
	priority = 40,
	ignore = {'missing'}
}
EOF
fi
echo "Debug-8">>./log_build_script.txt
cat >> base.lua << EOF

-- Make sure the updater is up to date before continuing
Package 'opkg-trans' { replan = true }
Install 'opkg-trans' 'updater-ng' { critical = true }
Install 'userlists' { critical = true }

-- Install everything that was in the image
EOF
echo "Debug-9">>./log_build_script.txt
# Other lists
echo 'config pkglists pkglists' > package/feeds/turrispackages/opkg-trans/files/updater.config
for i in lists/*.list; do
	echo "	list lists '`basename ${i/.list}`'" >> package/feeds/turrispackages/opkg-trans/files/updater.config
	cat "$i" "${i/%list/${TARGET_BOARD}}" | sed 's|#.*||' 2> /dev/null | while read PKG; do
		if expr "$PKG" : CONFIG_;then
			if [ "$TARGET_BOARD" = omnia ]; then
				echo "$PKG" | sed 's|=m|=y|' >> .config
			else
				echo "$PKG" >> .config
			fi
		elif [ -n "$PKG" ]; then
			if [ "$TARGET_BOARD" = omnia ] || [ "$i" = lists/base.list ]; then
				if [ "$BUILD_ALL" ] || [ "$i" = lists/base.list ]; then
					echo "CONFIG_PACKAGE_$PKG=y" >> .config
				fi
			else
				[ -z "$BUILD_ALL" ] || echo "CONFIG_PACKAGE_$PKG=m" >> .config
			fi
		fi
	done
done
echo "Debug-10">>./log_build_script.txt


}

set_signature() {
	[ -n "$USE_CCACHE" ] && echo "CONFIG_CCACHE=y" >> .config

	if [ -f "$HOME"/mime.key ]; then
	echo "Debug-11">>./log_build_script.txt
	echo "CONFIG_SIGNED_PACKAGES=y" >> .config
	rm -f key-build key-build.pub
	cp "$HOME/mime.key" key-build
	cp "$HOME/mime.pub" key-build.pub
	fi

	echo "Debug-12">>./log_build_script.txt

	[ "${TARGET_BOARD}" = omnia ] || echo "CONFIG_PACKAGE_updater-ng=m" >> ./.config

	make_defconfig
	echo "Debug-13">>./log_build_script.txt

	if [ -d .git ] ; then
	echo "Debug-14">>./log_build_script.txt

	git log -n1 --format='%H' >files/etc/git-version
	fi
}

make_rescue() {

if [ "$TARGET_BOARD" = omnia ]; then
	echo "Debug-39">>./log_build_script.txt

	cp configs/config-omnia-rescue .config
	[ -n "$USE_CCACHE" ] && echo "CONFIG_CCACHE=y" >> .config
    # Ugly hack, make python compile first to avoid possible race
    #./scripts/feeds uninstall python
	make defconfig CONFDEFAULT=n
	make clean

	make package/opkg/host/compile
	make package/opkg/host/install

	#echo "Debug-40">>./log_build_script.txt
	#make package/python3/clean V=s
	#echo "Debug-41">>./log_build_script.txt
	#make package/python3/compile V=s
	#echo "Debug-42">>./log_build_script.txt
	#make package/python/clean V=s
	#echo "Debug-43">>./log_build_script.txt
	#make package/python/compile V=s
	#echo "Debug-44">>./log_build_script.txt
	echo "config_log 1">>log_config.txt
	date >>log_config.txt
	cat .config >>log_config.txt
	echo "----------------">>log_config.txt
	make "$@"
	echo -e "CONFIG_TARGET_ROOTFS_INITRAMFS=y\nCONFIG_TARGET_INITRAMFS_COMPRESSION_XZ=y" >> .config
	sed -i 's/^TARGET_ROOTFS_INCLUDE_KERNEL=.*/# TARGET_ROOTFS_INCLUDE_KERNEL is not set/' .config
	sed -i 's/^CONFIG_TARGET_ROOTFS_INCLUDE_DTB.*/# CONFIG_TARGET_ROOTFS_INCLUDE_DTB is not set/' .config
	echo "Debug-45">>./log_build_script.txt
	make defconfig
	echo "Debug-46">>./log_build_script.txt
	make "$@"
	echo "config_log 2">>log_config.txt
	date >>log_config.txt
	cat .config >>log_config.txt
	echo "----------------">>log_config.txt
	make package/python/host/compile
	make package/python/host/install
	make package/python3/host/compile
	make package/python3/host/install

	cp build_dir/target-arm_cortex-a9+vfpv3_musl-*_eabi/root-mvebu/boot/uboot* build_dir
	rm -f build_dir/target-arm_cortex-a9+vfpv3_musl-*_eabi/root-mvebu/boot/* build_dir/target-arm_cortex-a9+vfpv3_musl-*_eabi/root-mvebu/etc/rc.d/*rainbow
	echo "Debug-47">>./log_build_script.txt
	make target/linux/compile "$@"
	echo "Debug-47.a">>./log_build_script.txt
	make target/linux/install
	if [ -d bin/targets/mvebu ]; then
		#mv bin/targets/mvebu bin/mvebu-musl
		cp -r bin/targets/mvebu bin/mvebu-musl
	fi
	echo "Debug-48">>./log_build_script.txt
	mkdir -p bin/mvebu-musl/
	cp `ls -d build_dir/target-arm_cortex-a9+vfpv3_musl-*_eabi/linux-mvebu`/{zImage-initramfs,zImage-initramfs-armada-385-turris-omnia}
	cat build_dir/target-arm_cortex-a9+vfpv3_musl-*_eabi/linux-mvebu/linux-4.4*/arch/arm/boot/dts/armada-385-turris-omnia.dtb >> `ls -d build_dir/target-arm_cortex-a9+vfpv3_musl-*_eabi/linux-mvebu`/zImage-initramfs-armada-385-turris-omnia
	[ \! -d ./logs ] || mv ./logs ./logs-initram
	cp build_dir/target-arm_*/linux-mvebu/zImage-initramfs-armada-385-turris-omnia bin/mvebu-musl/omnia-initramfs-zimage
	SIZE="`du -b bin/mvebu-musl/omnia-initramfs-zimage | sed 's|[[:blank:]].*||'`"
	echo "Rescue image size is ${SIZE}."
	if [ "$SIZE" -ge $(( 7 * 1024 * 1024 )) ]; then
		echo FATAL: Image too big.
		exit 1
	fi
	mv build_dir/uboot* bin/mvebu-musl
	mkdir -p bin/mvebu-musl/x86-64
	cp build_dir/host/uboot-turris-omnia*/turris-omnia-uboot/* bin/mvebu-musl/x86-64 || cp build_dir/target*/host/uboot-turris-omnia*/turris-omnia-uboot/* bin/mvebu-musl/x86-64
	mv bin bin-nor
	rm -rf bin-nor/mvebu-musl/packages
fi

}

##############################

clean_build
update_feeds
make_userlist
set_signature
make_rescue
